// TODO make folder click to token

$(function() {

  // add Permalink to uploaded photo
  $('.dropzone').on('dzUploadSuccess', '.dz-preview', function(e, permalink) {
    $(this).append('<a href="' + permalink + '">Link</a>');
  });


  /* SEARCH TOKENS
   * ---------------------------------------------------------------------------
   */
  var sourceTitles     = [],
      sourceListMarkup = '',

      sourceObj        = { // order = priority
        Aufnahmedatum:    {name: 'taken_at',     regex: /^(\d{2}.){2}.\d{2,4}$/,    comparable: true},
        'Upload-Datum':   {name: 'created_at',   regex: /^(\d{2}.){2}.\d{2,4}$/,    comparable: true},
        'Update-Datum':   {name: 'updated_at',   regex: /^(\d{2}.){2}.\d{2,4}$/,    comparable: true},
        Breite:           {name: 'width',        regex: /^\d{3,}$/,    unit: 'px',  comparable: true},
        "Höhe":           {name: 'height',       regex: /^\d{3,}$/,    unit: 'px',  comparable: true},
        Farbtiefe:        {name: 'color_depth',  regex: /^(8|16|24)$/, unit: 'Bit', comparable: true},
        "Dateigröße":     {name: 'filesize',     regex: /^\d+$/,       unit: 'MB',  comparable: true},
        Belichtungszeit:  {name: 'height',       regex: /^\d+.?\d+$/,  unit: 's',   comparable: true},
        Brennweite:       {name: 'focal_length', regex: /^\d{2,}$/,    unit: 'mm',  comparable: true},
        Blende:           {name: 'aperture',     regex: /^\d+.?\d+$/}, // not sure about this
        ISO:              {name: 'iso',          regex: /^\d{3,4}$/,                comparable: true},
        'Rot-Anteil':     {name: 'mean_red',     regex: /^\d{2}$/,     unit: '%',   comparable: true},
        'Grün-Anteil':    {name: 'mean_green',   regex: /^\d{2}$/,     unit: '%',   comparable: true},
        'Blau-Anteil':    {name: 'mean_blue',    regex: /^\d{2}$/,     unit: '%',   comparable: true},
        'Gelb-Anteil':    {name: 'mean_yellow',  regex: /^\d{2}$/,     unit: '%',   comparable: true},
        'Orange-Anteil':  {name: 'mean_orange',  regex: /^\d{2}$/,     unit: '%',   comparable: true},
        'Violett-Anteil': {name: 'mean_violet',  regex: /^\d{2}$/,     unit: '%',   comparable: true},
        'Magenta-Anteil': {name: 'mean_magenta', regex: /^\d{2}$/,     unit: '%',   comparable: true},
        'Cyan-Anteil':    {name: 'mean_cyan',    regex: /^\d{2}$/,     unit: '%',   comparable: true},
        'Braun-Anteil':   {name: 'mean_brown',   regex: /^\d{2}$/,     unit: '%',   comparable: true},
        'Weiß-Anteil':    {name: 'mean_white',   regex: /^\d{2}$/,     unit: '%',   comparable: true},
        'Schwarz-Anteil': {name: 'mean_black',   regex: /^\d{2}$/,     unit: '%',   comparable: true},
        Farbraum:         {name: 'color_space',  regex: /^(RGB|sRGB)$/,},
        Blitz:            {name: 'has_flash',    regex: /^(an|aus)$/},
        Dateityp:         {name: 'extension',    regex: /^(jpe?g|png|gif)$/i},
        Bildtitel:        {name: 'title',        regex: /^.+$/},
        Ort:              {name: 'camera',       regex: /^.+$/},
        Keyword:          {name: 'keywords',     regex: /^.+$/},
        Person:           {name: 'persons',      regex: /^[^\d]+$/},
        Kameramodell:     {name: 'camera',       regex: /^.+$/}
      };


  // init typeahead
  $('#search').typeahead({
    items: 17,

    // give titles to search through and build markup for listing all titles
    source: function(query, process) {
      if (sourceTitles.length < 1) {
        for (title in sourceObj) {
          sourceTitles.push(title);
          sourceListMarkup += '<li><a href="#">' + title + '</a></li>';
        }
      }

      process(sourceTitles);
    },

    // overwrite default matcher
    matcher: function (item) {
      return sourceObj[item].regex.test(this.query);
    },

    // generate search token if item is selected
    updater: function (item) {
      var title    = item,
          unit     = sourceObj[title].unit,
          hasUnit  = typeof unit != 'undefined',
          template = (
            '<div class="input-prepend ' + (hasUnit ? 'input-append ' : '') + 'token-wrapper">' +
              '<div class="btn-group">' +
                '<div class="dropdown">' +
                  '<button class="btn btn-primary token-btn dropdown-toggle" data-toggle="dropdown">' +
                    '##tokenTitle## ' + // leave the space in there so .caret gets some distance
                    '<span class="caret"></span>' +
                  '</button>' +
                  '<ul class="dropdown-menu dropdown-menu-search-key">' +
                    '##listItems##' +
                  '</ul>' +
                '</div>' +
                '<div class="dropdown dropdown-comparable' + (!!sourceObj[title].comparable ? '' : ' hide') + '">' +
                  '<button class="btn token-btn token-comparable-btn dropdown-toggle" data-toggle="dropdown">=</button>' +
                  '<ul class="dropdown-menu dropdown-menu-comparable">' + 
                    '<li><a href="#">≤</a></li>' +
                    '<li><a href="#">=</a></li>' +
                    '<li><a href="#">≥</a></li>' +
                  '</ul>' +
                  '<input type="hidden" name="##inputName##_operator" value="=">' +
                '</div>' +
              '</div>' +
              '<input class="token-input ##inputClass##" name="##inputName##" type="text" value="##inputValue##">' +
              '<a href="#" class="btn btn-danger token-delete">x</a>' + // must be before `span`, so last element gets correctly rounded borders
              '<span class="add-on' + (hasUnit ? '' : ' hide') + '">' + sourceObj[title].unit + '</span>' +
            '</div>'
          ).replace(/##tokenTitle##/, title)
          .replace(/##listItems##/, sourceListMarkup.replace('<li>' + title + '</li>', ''))
          .replace(/##inputClass##/, function(length) {
            if (length < 5)       return 'input-micro';
            else if (length < 9)  return 'input-mini';
            else if (length < 13) return 'input-small';
            else if (length < 22) return 'input-medium'
            else                  return 'input-large';
          }(this.query.length))
          .replace(/##inputValue##/, this.query)
          .replace(/##inputName##/g, sourceObj[title].name);

      $(template).insertBefore('.search-wrapper');

      return ''; // empty input
    }
  

  // click on list element in search-key dropdown shows new title and changes
  // title, updates comparable button and unit
  }).closest('form').on('click', '.token-wrapper .dropdown-menu-search-key a', function(e) {
    e.preventDefault();
  
    var $this     = $(this),
        title     = $this.text(),
        obj       = sourceObj[title];
    
    // show new title
    $this.parents('.dropdown-menu-search-key').siblings('button')
      .text(title + ' ')
      .append('<span class="caret"></span>')
      
      // show/hide comparable
      .parent() // .dropdown
      .siblings('.dropdown-comparable')
      .toggleClass('hide', !obj.comparable)

      // change comparable hidden input name
      .find('input')
      .prop('name', obj.name + '_operator')
      .end() // .dropdown-comparable
    
      // change key input value
      .parent() // .btn-group
      .siblings('input')
      .prop('name', obj.name)

      // show hide unit
      .siblings('.add-on')
      .toggleClass('hide', !obj.unit)
      .text(obj.unit)

      // toggle 'input-append'-class for unit
      .closest('.input-prepend')
      .toggleClass('input-append', !!obj.unit);
  

  // click on list element in comparator updates comparator (button and input)
  }).on('click', '.token-wrapper .dropdown-menu-comparable a', function(e) {
    e.preventDefault();

    var $this     = $(this),
        new_value = $this.text();

    $this.closest('.dropdown-comparable')
      .find('.token-comparable-btn')
      .text(new_value)
      .end() // .dropdown-comparable
      .find('input')
      .val(new_value);


  // click on delete-button 
  }).on('click', '.token-wrapper .token-delete', function(e) {
    e.preventDefault();

    $(this).parent().remove();
  });
  

  /* FOLDER ADD AND REMOVE
   * ---------------------------------------------------------------------------
   */
  var $tree = $('#navFolderTree');

  // add folder
  $tree.on('click', '.folder-add', function(e) {
    e.preventDefault();
    
    var $this     = $(this),
        url       = $this.attr('href'),
        activeID  = $tree.data('active-folder-id'),
        $parentUl = $this.closest('ul'),
        inputID   = 'parent_id',
        content   = '<input name="' + inputID + '" id="' + inputID + '" />';
    
    // build popover
    $this.popover({
      title: 'Name des Ordners?',
      content: content,
      html: true
    }).popover('show');

    // send request on enter
    $('#' + inputID).focus().on('keydown', function(e) {
      
      if (e.keyCode == 13) { // key code for 'enter'
        $.ajax({
          url: url,
          
          data: {
            name:      $(this).val(),
            active_id: activeID
          },

          // data will return html markup for parent list
          success: function(data) {
            $this.popover('destroy');
            $parentUl.replaceWith(data);
          }
        });
      }

    // close popover on blur
    }).on('blur', function() {
      $this.popover('destroy');
    });


  // remove folder
  }).on('click', '.folder-remove', function(e) {
    e.preventDefault();

    var $this     = $(this),
        url       = $this.attr('href');

    $.ajax({
      url: url,
      success: function(data) {
        var $li = $this.closest('li');

        if ($li.find('a.active').length > 0)
          $('#folder' + data.parent_id).click();
        else
          $li.remove();
      }
    });


  // folder click adds token to search
  }).on('click', '.folder-links-wrapper a', function(e) {
    e.preventDefault();

    var $this = $(this);

    // do nothing if user clicks on already active folder
    if ($this.hasClass('active'))
      return;

    history.pushState(null, '', '/folder/' + $this.data('folder-id'));
    changeActiveFolder();
    // TODO loadSearchResults();
  });


  // change active folder without reload
  if ($tree.length > 0) {
    var changeActiveFolder = function(folderID) {
        
        // find ID
        if (isNaN(folderID)) {
          var matches = window.location.href.match(/(\d)+\/?$/g);
          folderID = !matches
            ? $tree.find('a').eq(0).data('folder-id')
            : matches[0];
        }

        // don't do anything if we don't have a not-active folder clicked
        // possible reasons:
        //   - popstate on load-event
        //   - user clicks active folder
        var oldFolderID = $tree.data('active-folder-id');
        if (oldFolderID == folderID)
          return;

        // make new folder active on, set hidden input for search and upload
        $('#folder' + oldFolderID).removeClass('active');
        $tree.data('active-folder-id', folderID);
        $('#folder' + folderID).addClass('active');
        $('#folder_id').val(folderID);
    };

    // watch if we have to change folder on back
    window.addEventListener('popstate', changeActiveFolder, false);
  }


  /* INFINITE SCROLL
   * ---------------------------------------------------------------------------
   */
  if ($('.is-show-folder').length > 0) {
    var $previews            = $('#show-folder-image-previews'),
        folderID             = $previews.data('folder-id'),
        page                 = 1,
        isLoading            = false,
        hasMore              = true,

        // currecnt scroll position
        previewsBottom       = 0,
        updatePreviewsBottom = function() {
          previewsBottom = $previews.height() + $previews.offset().top;
        };
        updatePreviewsBottom();

    // scroll event listener
    $(window).scroll(function() {
      if (!isLoading && hasMore && window.scrollY + window.innerHeight >= previewsBottom) {
        isLoading = true;

        $.ajax({
          url: '<%= MmdbFotoportal::Application.routes.url_helpers.load_more_pictures_path(:format => :json) %>',
          data: {
            page:      ++page,
            folder_id: folderID
          },

          error: function(e) {
            console.log("error", e);
          },

          success: function(data) {
            var html    = '',
                $target = $('#show-folder-image-previews');
            
            for (var i = 0; i < data.pictures.length; i++) {
              html += data.pictures[i];
            };
            $target.append(html);
            
            hasMore = data.hasMore;
            if (!hasMore)
              $target.after('<p>Keine weiteren Fotos in diesem Ordner</p>');
          },

          complete: function() {
            updatePreviewsBottom();
            isLoading = false;

            // trigger scroll event in case window height is too low (so it is
            // not yet scrollable)
            $(window).scroll();
          }
        });
      }

    // trigger initial scroll event
    }).scroll();

    // TODO on new pictures loaded → set hasMore to true
    // TODO make load more pictures function → loadSearchResults() → outsource to make available for others
  }
});