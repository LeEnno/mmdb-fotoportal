$(function() {

  // increase/decrease
  var updatePictureCounters = function(parentIds, iterator) {
    $.each(parentIds, function(index, val) {
      var $picCount = $('#folder' + val).find('.folder-picture-count'),
          oldCount  = parseInt($picCount.text());
          newCount  = oldCount + iterator;
      $picCount.text(newCount);
    })
  }

  // add Permalink to uploaded photo
  $('.dropzone').on('dzUploadSuccess', '.dz-preview', function(e, data) {
    $(this).append('<a href="' + data.permalink + '">Link</a>');
    updatePictureCounters(data.parents, 1);
  });


  /* SEARCH TOKENS
   * ---------------------------------------------------------------------------
   */
  var sourceTitles     = [],
      sourceListMarkup = '',

      sourceObj        = { // order = priority
        Aufnahmedatum:    {name: 'taken_at',     regex: /^(\d{2}.){2}.\d{2,4}$/,      comparable: true},
        'Upload-Datum':   {name: 'created_at',   regex: /^(\d{2}.){2}.\d{2,4}$/,      comparable: true},
        'Update-Datum':   {name: 'updated_at',   regex: /^(\d{2}.){2}.\d{2,4}$/,      comparable: true},
        Breite:           {name: 'width',        regex: /^\d{3,}$/,    unit: 'px',    comparable: true},
        "Höhe":           {name: 'height',       regex: /^\d{3,}$/,    unit: 'px',    comparable: true},
        Farbtiefe:        {name: 'color_depth',  regex: /^(8|16|24)$/, unit: 'Bit',   comparable: true},
        "Dateigröße":     {name: 'filesize',     regex: /^\d+$/,       unit: 'Bytes', comparable: true},
        Belichtungszeit:  {name: 'height',       regex: /^\d+.?\d+$/,  unit: 's',     comparable: true},
        Brennweite:       {name: 'focal_length', regex: /^\d{2,}$/,    unit: 'mm',    comparable: true},
        Blende:           {name: 'aperture',     regex: /^\d+.?\d+$/}, // not sure about this
        ISO:              {name: 'iso',          regex: /^\d{3,4}$/,                  comparable: true},
        'Rot-Anteil':     {name: 'mean_red',     regex: /^\d{2}$/,     unit: '%',     comparable: true},
        'Grün-Anteil':    {name: 'mean_green',   regex: /^\d{2}$/,     unit: '%',     comparable: true},
        'Blau-Anteil':    {name: 'mean_blue',    regex: /^\d{2}$/,     unit: '%',     comparable: true},
        'Gelb-Anteil':    {name: 'mean_yellow',  regex: /^\d{2}$/,     unit: '%',     comparable: true},
        'Orange-Anteil':  {name: 'mean_orange',  regex: /^\d{2}$/,     unit: '%',     comparable: true},
        'Violett-Anteil': {name: 'mean_violet',  regex: /^\d{2}$/,     unit: '%',     comparable: true},
        'Magenta-Anteil': {name: 'mean_magenta', regex: /^\d{2}$/,     unit: '%',     comparable: true},
        'Cyan-Anteil':    {name: 'mean_cyan',    regex: /^\d{2}$/,     unit: '%',     comparable: true},
        'Braun-Anteil':   {name: 'mean_brown',   regex: /^\d{2}$/,     unit: '%',     comparable: true},
        'Weiß-Anteil':    {name: 'mean_white',   regex: /^\d{2}$/,     unit: '%',     comparable: true},
        'Schwarz-Anteil': {name: 'mean_black',   regex: /^\d{2}$/,     unit: '%',     comparable: true},
        Farbraum:         {name: 'color_space',  regex: /^(RGB|sRGB)$/,},
        Blitz:            {name: 'has_flash',    regex: /^(an|aus)$/},
        Dateityp:         {name: 'extension',    regex: /^(jpe?g|png|gif)$/i},
        Bildtitel:        {name: 'title',        regex: /^.+$/},
        Ort:              {name: 'location',     regex: /^.+$/},
        Keyword:          {name: 'keywords',     regex: /^.+$/},
        Person:           {name: 'persons',      regex: /^[^\d]+$/},
        Kameramodell:     {name: 'camera',       regex: /^.+$/}
      };


  // init typeahead
  $('#search').typeahead({
    items: 17,

    // give titles to search through and build markup for listing all titles
    source: function(query, process) {
      if (sourceTitles.length < 1) {
        for (title in sourceObj) {
          sourceTitles.push(title);
          sourceListMarkup += '<li><a href="#">' + title + '</a></li>';
        }
      }

      process(sourceTitles);
    },

    // overwrite default matcher
    matcher: function (item) {
      return sourceObj[item].regex.test(this.query);
    },

    // generate search token if item is selected
    updater: function (item) {
      var title    = item,
          unit     = sourceObj[title].unit,
          hasUnit  = typeof unit != 'undefined',
          template = (
            '<div class="input-prepend ' + (hasUnit ? 'input-append ' : '') + 'token-wrapper">' +
              '<div class="btn-group">' +
                '<div class="dropdown">' +
                  '<button class="btn btn-primary token-btn dropdown-toggle" data-toggle="dropdown" type="button">' +
                    '##tokenTitle## ' + // leave the space in there so .caret gets some distance
                    '<span class="caret"></span>' +
                  '</button>' +
                  '<ul class="dropdown-menu dropdown-menu-search-key">' +
                    '##listItems##' +
                  '</ul>' +
                '</div>' +
                '<div class="dropdown dropdown-comparable' + (!!sourceObj[title].comparable ? '' : ' hide') + '">' +
                  '<button class="btn token-btn token-comparable-btn dropdown-toggle" data-toggle="dropdown" type="button">=</button>' +
                  '<ul class="dropdown-menu dropdown-menu-comparable">' + 
                    '<li><a href="#">≤</a></li>' +
                    '<li><a href="#">=</a></li>' +
                    '<li><a href="#">≥</a></li>' +
                  '</ul>' +
                  '<input type="hidden" name="##inputName##_operator" value="=">' +
                '</div>' +
              '</div>' +
              '<input class="token-input ##inputClass##" name="##inputName##" type="text" value="##inputValue##">' +
              '<a href="#" class="btn btn-danger token-delete">x</a>' + // must be before `span`, so last element gets correctly rounded borders
              '<span class="add-on' + (hasUnit ? '' : ' hide') + '">' + sourceObj[title].unit + '</span>' +
            '</div>'
          ).replace(/##tokenTitle##/, title)
          .replace(/##listItems##/, sourceListMarkup.replace('<li>' + title + '</li>', ''))
          .replace(/##inputClass##/, function(length) {
            if (length < 5)       return 'input-micro';
            else if (length < 9)  return 'input-mini';
            else if (length < 13) return 'input-small';
            else if (length < 22) return 'input-medium'
            else                  return 'input-large';
          }(this.query.length))
          .replace(/##inputValue##/, this.query)
          .replace(/##inputName##/g, sourceObj[title].name);

      $(template).insertBefore('.search-wrapper');
      loadSearchResults();

      return ''; // empty input
    }
  

  // click on list element in search-key dropdown shows new title and changes
  // title, updates comparable button and unit
  }).closest('form').on('click', '.token-wrapper .dropdown-menu-search-key a', function(e) {
    e.preventDefault();
  
    var $this     = $(this),
        title     = $this.text(),
        obj       = sourceObj[title];
    
    // show new title
    $this.closest('.dropdown-menu-search-key').siblings('button')
      .text(title + ' ')
      .append('<span class="caret"></span>')
      
      // show/hide comparable
      .parent() // .dropdown
      .siblings('.dropdown-comparable')
      .toggleClass('hide', !obj.comparable)

      // change comparable hidden input name
      .find('input')
      .prop('name', obj.name + '_operator')
      .end() // .dropdown-comparable
    
      // change key input value
      .parent() // .btn-group
      .siblings('input')
      .prop('name', obj.name)

      // show hide unit
      .siblings('.add-on')
      .toggleClass('hide', !obj.unit)
      .text(obj.unit)

      // toggle 'input-append'-class for unit
      .closest('.input-prepend')
      .toggleClass('input-append', !!obj.unit);

    loadSearchResults();
  

  // click on list element in comparator updates comparator (button and input)
  }).on('click', '.token-wrapper .dropdown-menu-comparable a', function(e) {
    e.preventDefault();

    var $this     = $(this),
        new_value = $this.text(),
        db_value  = new_value;

    // convert so mysql understands us
    if (new_value == '≥')
      db_value = '>=';
    if (new_value == '≤')
      db_value = '<=';

    // update button text and hidden input value
    $this.closest('.dropdown-comparable')
      .find('.token-comparable-btn')
      .text(new_value)
      .end() // .dropdown-comparable
      .find('input')
      .val(db_value);

    loadSearchResults();


  // click on delete-button 
  }).on('click', '.token-wrapper .token-delete', function(e) {
    e.preventDefault();
    $(this).parent().remove();
    loadSearchResults();


  // submit on value change
  }).on('focus', '.token-input', function() {
    var $this     = $(this);
        valBefore = $this.val();

    $this.one('blur', function() {
      if ($this.val() != valBefore)
        loadSearchResults();
    });


  // submit search form on button-click or enter-press
  }).on('click', '.search-wrapper .btn', function(e) { // submit button
    e.preventDefault();
    loadSearchResults();

  }).on('submit', function(e) { // form (i.e. submit via enter)
    e.preventDefault();
    loadSearchResults();
  });



  /* AJAX SEARCH
   * -----------------------------------------------------------------------------
   */
  var loadSearchResults = function(increasePage) {
    var searchParams    = {},
        searchOperators = {}
        isNewSearch     = !increasePage;
    
    page = !!increasePage ? ++page : 1;
    searchParams['folder_id'] = $('#folder_id').val();

    $('.token-input').each(function(i, el) {
      var $el = $(el);
      searchParams[$el.prop('name')] = $el.val();
    });
    $('.dropdown-comparable:visible input').each(function(i, el) {
      var $el = $(el);
      searchOperators[$el.prop('name')] = $el.val();
    });

    $.ajax({
      url: '<%= MmdbFotoportal::Application.routes.url_helpers.search_path(:format => :json) %>',
      data: {
        search_params:    searchParams,
        search_operators: searchOperators,
        page:             page
      },

      error: function(e) {
        console.log("error", e);
      },

      success: function(data) {
        var html          = data.pictures,
            $target       = $('#show-folder-image-previews'),
            $noMoreImages = $('#noMoreImages');
        
        // append or replace search results
        if (isNewSearch) {
          $target.html(html);
          $('#searchResultsCount').text(data.allPicsCount);
        } else
          $target.append(html);
        
        // "no more images"-hint
        if (hasMore = data.hasMore) // assignment is intended!
          $noMoreImages.remove();
        else if ($noMoreImages.length < 1)
          $target.after('<p id="noMoreImages" class="alert">Keine weiteren Fotos für die aktuelle Suche</p>');
      },

      beforeSend: function() {
        isLoading = true;
      },

      complete: function() {
        updatePreviewsBottom();
        isLoading = false;

        // trigger scroll event in case window height is too low (so it is
        // not yet scrollable)
        $(window).scroll();
      }
    }); // end $.ajax
  }; // end loadSearchResults
  


  /* FOLDER ADD AND REMOVE
   * ---------------------------------------------------------------------------
   */
  var $tree         = $('#navFolderTree');

  // add folder
  $tree.on('click', '.folder-add', function(e) {
    e.preventDefault();
    
    var $this     = $(this),
        url       = $this.attr('href'),
        activeID  = $tree.data('active-folder-id'),
        $parentUl = $this.closest('ul'),
        inputID   = 'parent_id',
        content   = '<input name="' + inputID + '" id="' + inputID + '" />';
    
    // build popover
    $this.popover({
      title: 'Name des Ordners?',
      content: content,
      html: true
    }).popover('show');

    // send request on enter
    $('#' + inputID).focus().on('keydown', function(e) {
      
      if (e.keyCode == 13) { // key code for 'enter'
        $.ajax({
          url: url,
          
          data: {
            name:      $(this).val(),
            active_id: activeID
          },

          // data will return html markup for parent list
          success: function(data) {
            $this.popover('destroy');
            $parentUl.replaceWith(data);
          }
        });
      }

    // close popover on blur
    }).on('blur', function() {
      $this.popover('destroy');
    });


  // remove folder
  }).on('click', '.folder-remove', function(e) {
    e.preventDefault();

    var $this     = $(this),
        url       = $this.attr('href');

    $.ajax({
      url: url,
      success: function(data) {
        var $li = $this.closest('li');

        // if folder was active: simulate click on parent so we have a valid
        // active folder
        if ($li.find('a.active').length > 0)
          $('#folder' + data.parent_id).click();
        
        // we at least have to make sure search results are reloaded
        // (some pictures, that are currently shown could have been deleted)
        else
          loadSearchResults();

        // delete folder list item
        $li.remove();
      }
    });


  // folder click changes URL
  }).on('click', '.folder-link', function(e) {
    e.preventDefault();

    var $this = $(this);

    // do nothing if user clicks on already active folder
    if ($this.hasClass('active'))
      return;

    history.pushState(null, '', '/folder/' + $this.data('folder-id'));
    changeActiveFolder();
  });


  // only on gallery page
  if ($tree.length > 0) {

    // change active folder without reload
    var changeActiveFolder = function(folderID) {
        
      // find ID
      if (isNaN(folderID)) {
        var matches = window.location.href.match(/(\d)+\/?$/g);
        folderID = !matches
          ? $tree.find('a').eq(0).data('folder-id')
          : matches[0];
      }

      // don't do anything if we don't have a not-active folder clicked
      // possible reasons:
      //   - popstate on load-event
      //   - user clicks active folder
      var oldFolderID = $tree.data('active-folder-id');
      if (oldFolderID == folderID)
        return;

      // make new folder active on, set hidden input for search and upload
      $('#folder' + oldFolderID).removeClass('active');
      $tree.data('active-folder-id', folderID);
      $('#folder' + folderID).addClass('active');
      $('#folder_id').val(folderID);

      // new folder means new search results
      loadSearchResults();
    };

    // watch if we have to change folder on history-back
    window.addEventListener('popstate', changeActiveFolder, false);



    /* DELETE IMAGE
     * -----------------------------------------------------------------------------
     */
    $('.show-folder-image-preview-container').on('click', '.btn-delete-picture', function(e) {
      e.preventDefault();

      var $this = $(this);

      $.ajax({
        url: $this.attr('href'),
        success: function(data) {
          var $searchCount = $('#searchResultsCount'),
              countBefore  = $searchCount.text();
          $searchCount.text(parseInt(countBefore) - 1);
          
          $this.parent().remove();
          updatePictureCounters(data.parents, -1);
        }
      });
    });



    /* INFINITE SCROLL
     * ---------------------------------------------------------------------------
     */
    var $previews = $('#show-folder-image-previews'),
        page      = 1,
        isLoading = false,
        hasMore   = true,

        // current scroll position
        previewsBottom       = 0,
        updatePreviewsBottom = function() {
          previewsBottom = $previews.height() + $previews.offset().top;
        };
    
    updatePreviewsBottom();

    // scroll event listener
    $(window).scroll(function() {
      if (!isLoading && hasMore && window.scrollY + window.innerHeight >= previewsBottom) {
        loadSearchResults(true);
      }

    // trigger scroll on resize
    }).on('resize', function() {
      updatePreviewsBottom();
      $(this).scroll();

    // trigger initial scroll event
    }).scroll();

  } // end only on gallery page
});