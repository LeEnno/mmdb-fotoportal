<%= image_tag 'http://localhost:3000/uploads/10b944e3affaf140514764907fa702/f/f/medium.jpg', :width => 300, :id => 'huhu' %>



<div id="container">
  <div id="header"><div class="title">A Not-so-slow JavaScript Face Detector</div><div class="subtitle">For Source Code, Visit <a href="https://github.com/liuliu/ccv/tree/unstable/js">Github</a>; For More Discussions, Visit <a href="http://liuliu.me">liuliu.me</a>; Or Paste Your Photo at <a href="http://imgur.com">imgur.com</a></div></div>
  <div id="content">
    <div id="urlbox"><div id="detect"><input id="url-detect" type="button" value="Detect"></div><div class="paragraph">URL: </div><div id="url"><div id="url-hint">Paste an image URL here</div><input class="no-border" id="url-image" type="text"></div></div>
    <div id="stats">Stats: Web Worker - <a id="webworker-switch" href="#">Off</a>, Load Time: <span id="load-time">None</span>, Detection Time: <span id="detection-time">None</span>, <span id="num-faces">?</span> Faces Found at <span id="image-dim">?x?</span></div>
    <div id="viewport"><div id="view-hint">Drag &amp; Drop<br>or <u>Select</u> To</div><div id="view-horz"></div><div id="view-vtic"></div><div><canvas id="output"></canvas><input type="file" id="file-selector" accept="image/*"></div>
  </div>
  <div id="footer"><div><a href="http://facebook.com/liu.ll">Liu Liu</a> @ <a href="http://liuliu.me">liuliu.me</a></div></div>
</div>
<script type="text/javascript">
function getImageDim(image) {
  var result = {};
  document.body.appendChild(image);
  result['width'] = image.offsetWidth;
  result['height'] = image.offsetHeight;
  document.body.removeChild(image);
  return result;
}

function detectNewImage(src, async) {
  document.getElementById("load-time").innerHTML = "Measuring ...";
  document.getElementById("detection-time").innerHTML = "None";
  document.getElementById("num-faces").innerHTML = "?";
  document.getElementById("image-dim").innerHTML = "?x?";
  var elapsed_time = (new Date()).getTime();
  var image = new Image();
  var canvas = document.getElementById("output");
  var ctx = canvas.getContext("2d");
  image.onload = function () {
    /* load image, and draw it to canvas */
    document.getElementById("load-time").innerHTML = Math.round((new Date()).getTime() - elapsed_time).toString() + "ms";
    document.getElementById("detection-time").innerHTML = "Measuring ...";
    var dim = getImageDim(image);
    document.getElementById("image-dim").innerHTML = dim.width.toString() + "x" + dim.height.toString();
    var boundingWidth = document.getElementById("content").offsetWidth - 4;
    var boundingHeight = window.innerHeight - (document.getElementById("header").offsetHeight + document.getElementById("footer").offsetHeight + document.getElementById("urlbox").offsetHeight + document.getElementById("stats").offsetHeight) - 120;
    var viewport = document.getElementById("viewport");
    var newWidth = dim.width, newHeight = dim.height, scale = 1;
    if (dim.width * boundingHeight > boundingWidth * dim.height) {
      newWidth = boundingWidth;
      newHeight = boundingWidth * dim.height / dim.width;
      scale = newWidth / dim.width;
    } else {
      newHeight = boundingHeight;
      newWidth = boundingHeight * dim.width / dim.height;
      scale = newHeight / dim.height;
    }
    viewport.style.width = newWidth.toString() + "px";
    viewport.style.height = newHeight.toString() + "px";
    canvas.width = newWidth;
    canvas.style.width = newWidth.toString() + "px";
    canvas.height = newHeight;
    canvas.style.height = newHeight.toString() + "px";
    ctx.drawImage(image, 0, 0, newWidth, newHeight);
    elapsed_time = (new Date()).getTime();
    function post(comp) {
      document.getElementById("num-faces").innerHTML = comp.length.toString();
      document.getElementById("detection-time").innerHTML = Math.round((new Date()).getTime() - elapsed_time).toString() + "ms";
      ctx.lineWidth = 2;
      ctx.strokeStyle = 'rgba(230,87,0,0.8)';
      /* draw detected area */
      for (var i = 0; i < comp.length; i++) {
        ctx.beginPath();
        ctx.arc((comp[i].x + comp[i].width * 0.5) * scale, (comp[i].y + comp[i].height * 0.5) * scale,
            (comp[i].width + comp[i].height) * 0.25 * scale * 1.2, 0, Math.PI * 2);
        ctx.stroke();
      }
    }
    /* call main detect_objects function */
    if (async) {
      ccv.detect_objects({ "canvas" : ccv.grayscale(ccv.pre(image)),
                 "cascade" : cascade,
                 "interval" : 5,
                 "min_neighbors" : 1,
                 "async" : true,
                 "worker" : 1 })(post);
    } else {
      var comp = ccv.detect_objects({ "canvas" : ccv.grayscale(ccv.pre(image)),
                      "cascade" : cascade,
                      "interval" : 5,
                      "min_neighbors" : 1 });
      post(comp);
    }
  };
  image.src = src;
}

$(function() {
  var image = $('#huhu')[0];
  image.onload = function() {
    console.log('vanilla JS onload');
    detectNewImage(image.src, false);
  };
});

</script>