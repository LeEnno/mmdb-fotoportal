<%= image_tag 'http://localhost:3000/uploads/7/1/3c8afac170a75146292bcd327106f7/medium.jpg', :id => 'huhu' %>

<style>
body, html {margin:0; padding:0;}
.found-image {position:absolute; border:1px solid red;}
img {max-width:700px;}
</style>


<!-- <div id="content">
  <div id="viewport">
    <div> -->
      <!-- <canvas id="output"></canvas> -->
      <!-- <input type="file" id="file-selector" accept="image/*" /> -->
    <!-- </div>
  </div> -->

  <!-- <div id="stats">Stats: Web Worker - <a id="webworker-switch" href="#">Off</a>,
    Detection Time: <span id="detection-time">None</span>, <span id="num-faces">?</span> Faces
    Found at <span id="image-dim">?x?</span></div> -->

  <script type="text/javascript">
    /*function getImageDim(image) {
      var result = {};
      document.body.appendChild(image);
      result['width'] = image.offsetWidth;
      result['height'] = image.offsetHeight;
      document.body.removeChild(image);
      return result;
    }*/

    function detectNewImage(src, async) {
      // document.getElementById("detection-time").innerHTML = "None";
      // document.getElementById("num-faces").innerHTML = "?";
      // document.getElementById("image-dim").innerHTML = "?x?";
      // var elapsed_time = (new Date()).getTime();
      // var image = new Image();
      var image = $('#huhu').get(0);
      // var canvas = document.getElementById("output");
      // var ctx = canvas.getContext("2d");
      // image.onload = function () {
        /* load image, and draw it to canvas */
        // document.getElementById("detection-time").innerHTML = "Measuring ...";
        // var dim = getImageDim(image);
        // var dim = {width: image.offsetWidth, height: image.offsetHeight};
        // document.getElementById("image-dim").innerHTML = dim.width.toString() + "x" + dim.height.toString();
        // var boundingWidth = document.getElementById("content").offsetWidth - 4;
        // var boundingHeight = window.innerHeight - (document.getElementById("header").offsetHeight + document.getElementById("footer").offsetHeight + document.getElementById("urlbox").offsetHeight + document.getElementById("stats").offsetHeight) - 120;
        // var viewport = document.getElementById("viewport");
        // var newWidth = dim.width, newHeight = dim.height, scale = 1;
        // if (dim.width * boundingHeight > boundingWidth * dim.height) {
        //   newWidth = boundingWidth;
        //   newHeight = boundingWidth * dim.height / dim.width;
        //   scale = newWidth / dim.width;
        // } else {
        //   newHeight = boundingHeight;
        //   newWidth = boundingHeight * dim.width / dim.height;
        //   scale = newHeight / dim.height;
        // }

        // viewport.style.width = newWidth.toString() + "px";
        // viewport.style.height = newHeight.toString() + "px";
        // canvas.width = newWidth;
        // canvas.style.width = newWidth.toString() + "px";
        // canvas.height = newHeight;
        // canvas.style.height = newHeight.toString() + "px";
        // ctx.drawImage(image, 0, 0, newWidth, newHeight);
        // elapsed_time = (new Date()).getTime();
        function post(comp) {
          // document.getElementById("num-faces").innerHTML = comp.length.toString();
          // document.getElementById("detection-time").innerHTML = Math.round((new Date()).getTime() - elapsed_time).toString() + "ms";
          // ctx.lineWidth = 2;
          // ctx.strokeStyle = 'rgba(230,87,0,0.8)';
          /* draw detected area */
          console.log('stopped');
          for (var i = 0; i < comp.length; i++) {
            // ctx.beginPath();
            // ctx.arc((comp[i].x + comp[i].width * 0.5) * scale, (comp[i].y + comp[i].height * 0.5) * scale,
            //   (comp[i].width + comp[i].height) * 0.25 * scale * 1.2, 0, Math.PI * 2);
            // ctx.stroke();

            $('<div class="found-image" />').appendTo('body').css({
              top: comp[i].y,
              left: comp[i].x,
              height: comp[i].height,
              width: comp[i].width,
            });
          }
        }

        /* call main detect_objects function */
        if (async) {
          console.log('started');
          ccv.detect_objects({
            "canvas":        ccv.grayscale(ccv.pre(image)),
            "cascade":       cascade,
            "interval":      5,
            "min_neighbors": 1,
            "async":         true,
            "worker":        1
          })(post);
        } else {
          var comp = ccv.detect_objects({
            "canvas":        ccv.grayscale(ccv.pre(image)),
            "cascade":       cascade,
            "interval":      5,
            "min_neighbors": 1 });
          post(comp);
        }
      // };
      // image.src = src;
    }

    $(function () {
      var image = $('#huhu')[0];
      image.onload = function () {
        detectNewImage(image.src, true);
      };
    });

  </script>